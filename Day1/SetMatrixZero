/*
  Problem Statement: Given a matrix if an element in the matrix is 0 then you will have to set its entire column and row to 0 and then return the matrix.
  Examples:
    Examples 1:
    Input: matrix=[[1,1,1],[1,0,1],[1,1,1]]
    Output: [[1,0,1],[0,0,0],[1,0,1]]
    Explanation: Since matrix[2][2]=0.Therfore the 2nd column and 2nd row wil be set to 0.
    Input: matrix=[[0,1,2,0],[3,4,5,2],[1,3,1,5]]
    Output:[[0,0,0,0],[0,4,5,0],[0,3,1,0]]
    Explanation:Since matrix[0][0]=0 and matrix[0][3]=0. Therefore 1st row, 1st column and 4th column will be set to 0
*/
----------------------------------------------------------------------------------------------------------------------
//Bruttee Force Approach 
//TC O((N*M)*(N + M)). O(N*M) 
//SC O(1)
#include <bits/stdc++.h>

using namespace std;

void setZeroes(vector<vector<int>> &arr)
{
    int row{arr.size()};
    int col{arr[0].size()};
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            if (arr[i][j] == 0)
            {

                int ind = i - 1;
                while (ind >= 0)
                {
                    if (arr[ind][j])
                        arr[ind][j] = -1;
                    ind--;
                }
                ind = i + 1;
                while (ind <= row - 1)
                {
                    if (arr[ind][j])
                        arr[ind][j] = -1;
                    ind++;
                }
                ind = j - 1;
                while (ind >= 0)
                {
                    if (arr[i][ind])
                        arr[i][ind] = -1;
                    ind--;
                }
                ind = j + 1;
                while (ind <= col - 1)
                {
                    if (arr[i][ind])
                        arr[i][ind] = -1;
                    ind++;
                }
            }
        }
    }
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            if (arr[i][j] == -1)
                arr[i][j] = 0;
        }
    }
}
int main()
{
    vector<vector<int>> arr;
    arr = {{0, 1, 2, 0}, {3, 4, 5, 2}, {1, 3, 1, 5}};
    setZeroes(arr);
    cout << "The Final Matrix is " << endl;
    for (int i = 0; i < arr.size(); i++)
    {
        for (int j = 0; j < arr[0].size(); j++)
        {
            cout << arr[i][j] << " ";
        }
        cout << "\n";
    }
}

-------------------------------------------------------------------------------------------------------------------------------------
//Better Approach using dummy array
/*
 Intuition: Instead of traversing through each row and column, we can use dummy arrays to check if the particular
            row or column has an element 0 or not, which will improve the time complexity.
Approach: Take two dummy array one of size of row and other of size of column.
          Now traverse through the array.If matrix[i][j]==0 then set dummy1[i]=0(for row) and dummy2[j]=0(for column).
          Now traverse through the array again and if dummy1[i]==0  || dummy2[j]==0 then arr[i][j]=0,else continue.
*/
//Time Complexity: O(N*M + N*M)
//Space Complexity: O(N)

#include<bits/stdc++.h>
using namespace std;
void setZeroes(vector < vector < int >> & matrix) {
  int rows = matrix.size(), cols = matrix[0].size();
  vector < int > dummy1(rows,-1), dummy2(cols,-1);
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      if (matrix[i][j] == 0) {
        dummy1[i] = 0;
        dummy2[j] = 0;
      }
    }

  }
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      if (dummy1[i] == 0 || dummy2[j]==0) {
        matrix[i][j] = 0;
      }
    }
  }

}

int main() {
  vector < vector < int >> arr;
  arr = {{0, 1, 2, 0}, {3, 4, 5, 2}, {1, 3, 1, 5}};
  setZeroes(arr);
  cout<<"The Final Matrix is "<<endl;
  for (int i = 0; i < arr.size(); i++) {
    for (int j = 0; j < arr[0].size(); j++) {
      cout << arr[i][j] << " ";
    }
    cout << "\n";
  }
}

--------------------------------------------------------------------------------------------------------------------------------------
//Optimizing better approach so we can use inplace method only

//Time Complexity: O(2*(N*M)), as we are traversing two times in a matrix.
//Space Complexity: O(1).

/*
  Intuition: Instead of taking two dummy arrays we can use the first row and column of the matrix for the same work. 
      This will help to reduce the space complexity of the problem. 
      While traversing for the second time the first row and column will be computed first, 
      which will affect the values of further elements thatâ€™s why we traversing in the reverse direction.

Approach:Instead of taking two separate dummy array,take first row and column of the matrix as the array for checking whether 
    the particular column or row has the value 0 or not.Since matrix[0][0] are overlapping.
    Therefore take separate variable col0(say) to check if the 0th column has 0 or not and use matrix[0][0] to check if the 0th row has 0 or not.
    Now traverse from last element to the first element and check if matrix[i][0]==0 || matrix[0][j]==0 and if true set matrix[i][j]=0,else continue.
*/
#include<bits/stdc++.h>
using namespace std;
void setZeroes(vector < vector < int >> & matrix) {
  int col0 = 1, rows = matrix.size(), cols = matrix[0].size();
  for (int i = 0; i < rows; i++) {
    //checking if 0 is present in the 0th column or not
    if (matrix[i][0] == 0) col0 = 0;
    for (int j = 1; j < cols; j++) {
      if (matrix[i][j] == 0) {
        matrix[i][0] = 0;
        matrix[0][j] = 0;
      }
    }
  }
  //traversing in the reverse direction and
  //checking if the row or col has 0 or not
  //and setting values of matrix accordingly.
  for (int i = rows - 1; i >= 0; i--) {
    for (int j = cols - 1; j >= 1; j--) {
      if (matrix[i][0] == 0 || matrix[0][j] == 0) {
        matrix[i][j] = 0;
      }
    }
    if (col0 == 0) {
      matrix[i][0] = 0;
    }

  }

}

int main() {
  vector < vector < int >> arr;
  arr = {{0, 1, 2, 0}, {3, 4, 5, 2}, {1, 3, 1, 5}};
  setZeroes(arr);
  cout<<"The Final Matrix is "<<endl;
  for (int i = 0; i < arr.size(); i++) {
    for (int j = 0; j < arr[0].size(); j++) {
      cout << arr[i][j] << " ";
    }
    cout << "\n";
  }
}
